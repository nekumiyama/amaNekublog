{"version":3,"sources":["webpack:///./src/components/postcategory.js","webpack:///./src/templates/blog-post.js"],"names":["Postcategory","postcategory","categories","useStaticQuery","site","siteMetadata","color","forEach","category","name","style","backgroundColor","padding","borderRadius","textAlign","defaultProps","BlogPostTemplate","data","pageContext","location","post","markdownRemark","siteTitle","title","previous","next","frontmatter","description","excerpt","marginTop","rhythm","marginBottom","date","dangerouslySetInnerHTML","__html","html","display","flexWrap","justifyContent","listStyle","to","fields","slug","rel","pageQuery"],"mappings":"2FAAA,qCAIMA,EAAe,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAchBC,EAbOC,yBAAe,cAaJC,KAAKC,aAAaH,WACtCI,EAAK,MAQT,OANAJ,EAAWK,SAAQ,SAAAC,GACbP,IAAiBO,EAASC,OAC5BH,EAAQE,EAASF,UAKnB,2BACEI,MAAO,CACLC,gBAAgB,GAAIL,EACpBM,QAAQ,UACRC,aAAa,KACbC,UAAU,WAIXb,IAKPD,EAAae,aAAe,CAC1Bd,aAAa,WAOAD,O,kCClDf,sIAkFegB,UA1EU,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACvCC,EAAOH,EAAKI,eACZC,EAAYL,EAAKb,KAAKC,aAAakB,MACjCC,EAAmBN,EAAnBM,SAAUC,EAASP,EAATO,KAElB,OACE,kBAAC,IAAD,CAAQN,SAAUA,EAAUI,MAAOD,GACjC,kBAAC,IAAD,CACEC,MAAOH,EAAKM,YAAYH,MACxBI,YAAaP,EAAKM,YAAYC,aAAeP,EAAKQ,UAEpD,iCACE,gCACE,2BACElB,MAAO,CACLmB,UAAWC,YAAO,GAClBC,aAAc,IAGfX,EAAKM,YAAYM,MAEpB,wBACEtB,MAAO,CACLqB,aAAcD,YAAO,MAGtBV,EAAKM,YAAYH,OAEpB,uBACEb,MAAO,CACLqB,aAAcD,YAAO,OAGvB,kBAAC,IAAD,CAAc7B,aAAcmB,EAAKM,YAAYlB,aAGjD,6BAASyB,wBAAyB,CAAEC,OAAQd,EAAKe,QACjD,wBACEzB,MAAO,CACLqB,aAAcD,YAAO,OAK3B,6BACE,wBACEpB,MAAO,CACL0B,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACV3B,QAAS,IAGX,4BACGY,GACC,kBAAC,OAAD,CAAMgB,GAAIhB,EAASiB,OAAOC,KAAMC,IAAI,QAApC,KACKnB,EAASE,YAAYH,QAI9B,4BACGE,GACC,kBAAC,OAAD,CAAMe,GAAIf,EAAKgB,OAAOC,KAAMC,IAAI,QAC7BlB,EAAKC,YAAYH,MADpB,WAaP,IAAMqB,EAAS","file":"component---src-templates-blog-post-js-f0ad9ebced59f800bc64.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst Postcategory = ({ postcategory }) => {\r\n  const data = useStaticQuery(graphql`\r\n    query PostcatQuery {\r\n      site {\r\n        siteMetadata {\r\n          categories {\r\n            name\r\n            color\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const categories = data.site.siteMetadata.categories\r\n  let color = `red`\r\n\r\n  categories.forEach(category => {\r\n    if (postcategory === category.name) {\r\n      color = category.color\r\n    }\r\n  }) \r\n\r\n  return (\r\n    <small\r\n      style={{\r\n        backgroundColor: `${color}`,\r\n        padding: `6px 8px`,\r\n        borderRadius: `5%`,\r\n        textAlign: `center`,\r\n        //fontWeight: `bold`,\r\n      }}\r\n    >\r\n      {postcategory}\r\n    </small>\r\n  )\r\n}\r\n\r\nPostcategory.defaultProps = {\r\n  postcategory: `default`,\r\n}\r\n\r\nPostcategory.propTypes = {\r\n  postcategory: PropTypes.string,\r\n}\r\n\r\nexport default Postcategory\r\n","import React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport Postcategory from \"../components/postcategory\"\r\nimport { rhythm } from \"../utils/typography\"\r\n\r\nconst BlogPostTemplate = ({ data, pageContext, location }) => {\r\n  const post = data.markdownRemark\r\n  const siteTitle = data.site.siteMetadata.title\r\n  const { previous, next } = pageContext\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <SEO\r\n        title={post.frontmatter.title}\r\n        description={post.frontmatter.description || post.excerpt}\r\n      />\r\n      <article>\r\n        <header>\r\n          <small\r\n            style={{\r\n              marginTop: rhythm(1),\r\n              marginBottom: 0,\r\n            }}\r\n          >\r\n            {post.frontmatter.date}\r\n          </small>\r\n          <h1\r\n            style={{\r\n              marginBottom: rhythm(0.5),\r\n            }}\r\n          >\r\n            {post.frontmatter.title}\r\n          </h1>\r\n          <p\r\n            style={{\r\n              marginBottom: rhythm(1.5),\r\n            }}\r\n          >\r\n            <Postcategory postcategory={post.frontmatter.category}/>\r\n          </p>\r\n        </header>\r\n        <section dangerouslySetInnerHTML={{ __html: post.html }} />\r\n        <hr\r\n          style={{\r\n            marginBottom: rhythm(1),\r\n          }}\r\n        />\r\n      </article>\r\n\r\n      <nav>\r\n        <ul\r\n          style={{\r\n            display: `flex`,\r\n            flexWrap: `wrap`,\r\n            justifyContent: `space-between`,\r\n            listStyle: `none`,\r\n            padding: 0,\r\n          }}\r\n        >\r\n          <li>\r\n            {previous && (\r\n              <Link to={previous.fields.slug} rel=\"prev\">\r\n                ← {previous.frontmatter.title}\r\n              </Link>\r\n            )}\r\n          </li>\r\n          <li>\r\n            {next && (\r\n              <Link to={next.fields.slug} rel=\"next\">\r\n                {next.frontmatter.title} →\r\n              </Link>\r\n            )}\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogPostTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug($slug: String!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      id\r\n      excerpt(pruneLength: 160)\r\n      html\r\n      frontmatter {\r\n        title\r\n        date(formatString: \"YYYY.MM.DD\")\r\n        description\r\n        category\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}
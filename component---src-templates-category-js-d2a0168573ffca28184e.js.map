{"version":3,"sources":["webpack:///./src/components/postcategory.js","webpack:///./src/templates/category.js"],"names":["Postcategory","postcategory","categories","useStaticQuery","site","siteMetadata","color","forEach","category","name","style","backgroundColor","padding","borderRadius","textAlign","defaultProps","CategoryTemplate","data","pageContext","location","siteTitle","title","posts","allMarkdownRemark","edges","marginBottom","rhythm","map","node","frontmatter","fields","slug","key","boxShadow","to","display","date","pageQuery"],"mappings":"2FAAA,qCAIMA,EAAe,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAchBC,EAbOC,yBAAe,cAaJC,KAAKC,aAAaH,WACtCI,EAAK,MAQT,OANAJ,EAAWK,SAAQ,SAAAC,GACbP,IAAiBO,EAASC,OAC5BH,EAAQE,EAASF,UAKnB,2BACEI,MAAO,CACLC,gBAAgB,GAAIL,EACpBM,QAAQ,UACRC,aAAa,KACbC,UAAU,WAIXb,IAKPD,EAAae,aAAe,CAC1Bd,aAAa,WAOAD,O,kCClDf,sIAuDegB,UA/CU,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACvCC,EAAYH,EAAKb,KAAKC,aAAagB,MACnCC,EAAQL,EAAKM,kBAAkBC,MAC7BhB,EAAaU,EAAbV,SAER,OACE,kBAAC,IAAD,CAAQW,SAAUA,EAAUE,MAAOD,GACjC,kBAAC,IAAD,CAAKC,MAAUb,EAAL,mBACV,4BAAKA,GACL,wBACEE,MAAO,CACLe,aAAcC,YAAO,MAGxBJ,EAAMK,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNP,EAAQO,EAAKC,YAAYR,OAASO,EAAKE,OAAOC,KACpD,OACE,6BAASC,IAAKJ,EAAKE,OAAOC,MACxB,gCACE,wBACErB,MAAO,CACLe,aAAcC,YAAO,EAAI,KAG3B,kBAAC,OAAD,CAAMhB,MAAO,CAAEuB,UAAU,QAAWC,GAAIN,EAAKE,OAAOC,MACjDV,IAGL,2BACEX,MAAO,CACLyB,QAAQ,QACRV,aAAcC,YAAO,EAAI,KAG1BE,EAAKC,YAAYO,OAGtB,2BACE,kBAAC,IAAD,CAAcnC,aAAc2B,EAAKC,YAAYrB,kBAWpD,IAAM6B,EAAS","file":"component---src-templates-category-js-d2a0168573ffca28184e.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst Postcategory = ({ postcategory }) => {\r\n  const data = useStaticQuery(graphql`\r\n    query PostcatQuery {\r\n      site {\r\n        siteMetadata {\r\n          categories {\r\n            name\r\n            color\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const categories = data.site.siteMetadata.categories\r\n  let color = `red`\r\n\r\n  categories.forEach(category => {\r\n    if (postcategory === category.name) {\r\n      color = category.color\r\n    }\r\n  }) \r\n\r\n  return (\r\n    <small\r\n      style={{\r\n        backgroundColor: `${color}`,\r\n        padding: `6px 8px`,\r\n        borderRadius: `5%`,\r\n        textAlign: `center`,\r\n        //fontWeight: `bold`,\r\n      }}\r\n    >\r\n      {postcategory}\r\n    </small>\r\n  )\r\n}\r\n\r\nPostcategory.defaultProps = {\r\n  postcategory: `default`,\r\n}\r\n\r\nPostcategory.propTypes = {\r\n  postcategory: PropTypes.string,\r\n}\r\n\r\nexport default Postcategory\r\n","import React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport Postcategory from \"../components/postcategory\"\r\nimport { rhythm } from \"../utils/typography\"\r\n\r\nconst CategoryTemplate = ({ data, pageContext, location }) => {\r\n  const siteTitle = data.site.siteMetadata.title\r\n  const posts = data.allMarkdownRemark.edges\r\n  const { category } = pageContext\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <SEO title={`${category} | amaNekublog`} />\r\n      <h2>{category}</h2>\r\n      <hr\r\n        style={{\r\n          marginBottom: rhythm(1),\r\n        }}\r\n      />\r\n      {posts.map(({ node }) => {\r\n        const title = node.frontmatter.title || node.fields.slug\r\n        return (\r\n          <article key={node.fields.slug}>\r\n            <header>\r\n              <h3\r\n                style={{\r\n                  marginBottom: rhythm(1 / 4),\r\n                }}\r\n              >\r\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\r\n                  {title}\r\n                </Link>\r\n              </h3>\r\n              <small\r\n                style={{\r\n                  display: `block`,\r\n                  marginBottom: rhythm(1 / 4),\r\n                }}\r\n              >\r\n                {node.frontmatter.date}\r\n              </small>\r\n            </header>\r\n            <p>\r\n              <Postcategory postcategory={node.frontmatter.category}/>\r\n            </p>\r\n          </article>\r\n        )\r\n      })}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default CategoryTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query($category: String) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { category: { in: [$category] } } }\r\n    ) {\r\n      edges {\r\n        node {\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date(formatString: \"YYYY.MM.DD\")\r\n            title\r\n            description\r\n            category\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}